// This file was generated by Mendix Business Modeler 5.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testsuite.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the TestSuite module

	public static java.util.List<amazons3connector.proxies.S3SummaryObject> dS_GetObjects(IContext context, amazons3connector.proxies.S3Bucket _s3Bucket)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("S3Bucket", _s3Bucket == null ? null : _s3Bucket.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "TestSuite.DS_GetObjects", params);
			java.util.List<amazons3connector.proxies.S3SummaryObject> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<amazons3connector.proxies.S3SummaryObject>();
				for (IMendixObject obj : objs)
					result.add(amazons3connector.proxies.S3SummaryObject.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_SearchForBucket(IContext context, amazons3connector.proxies.Search _search)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Search", _search == null ? null : _search.getMendixObject());
			Core.execute(context, "TestSuite.IVK_SearchForBucket", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_ShowFileUpload(IContext context, amazons3connector.proxies.S3Bucket _s3Bucket)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("S3Bucket", _s3Bucket == null ? null : _s3Bucket.getMendixObject());
			Core.execute(context, "TestSuite.IVK_ShowFileUpload", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_ShowObjects(IContext context, amazons3connector.proxies.S3Bucket _s3Bucket)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("S3Bucket", _s3Bucket == null ? null : _s3Bucket.getMendixObject());
			Core.execute(context, "TestSuite.IVK_ShowObjects", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean iVK_UploadFiles(IContext context, amazons3connector.proxies.S3Bucket _s3Bucket)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("S3Bucket", _s3Bucket == null ? null : _s3Bucket.getMendixObject());
			return (Boolean)Core.execute(context, "TestSuite.IVK_UploadFiles", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void openAccount(IContext context, administration.proxies.Account _account)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Account", _account == null ? null : _account.getMendixObject());
			Core.execute(context, "TestSuite.OpenAccount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void openAccounts(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "TestSuite.OpenAccounts", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}