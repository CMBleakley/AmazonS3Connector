// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package amazons3connector.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Represents the file metadata as stored in S3
 */
public class S3SummaryObject
{
	private final IMendixObject s3SummaryObjectMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "AmazonS3Connector.S3SummaryObject";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Key("Key"),
		FileName("FileName"),
		FolderPath("FolderPath"),
		S3Object_S3Bucket("AmazonS3Connector.S3Object_S3Bucket");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public S3SummaryObject(IContext context)
	{
		this(context, Core.instantiate(context, "AmazonS3Connector.S3SummaryObject"));
	}

	protected S3SummaryObject(IContext context, IMendixObject s3SummaryObjectMendixObject)
	{
		if (s3SummaryObjectMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("AmazonS3Connector.S3SummaryObject", s3SummaryObjectMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a AmazonS3Connector.S3SummaryObject");

		this.s3SummaryObjectMendixObject = s3SummaryObjectMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'S3SummaryObject.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static amazons3connector.proxies.S3SummaryObject initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return amazons3connector.proxies.S3SummaryObject.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static amazons3connector.proxies.S3SummaryObject initialize(IContext context, IMendixObject mendixObject)
	{
		return new amazons3connector.proxies.S3SummaryObject(context, mendixObject);
	}

	public static amazons3connector.proxies.S3SummaryObject load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return amazons3connector.proxies.S3SummaryObject.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Key
	 */
	public final String getKey()
	{
		return getKey(getContext());
	}

	/**
	 * @param context
	 * @return value of Key
	 */
	public final String getKey(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Key.toString());
	}

	/**
	 * Set value of Key
	 * @param key
	 */
	public final void setKey(String key)
	{
		setKey(getContext(), key);
	}

	/**
	 * Set value of Key
	 * @param context
	 * @param key
	 */
	public final void setKey(IContext context, String key)
	{
		getMendixObject().setValue(context, MemberNames.Key.toString(), key);
	}

	/**
	 * @return value of FileName
	 */
	public final String getFileName()
	{
		return getFileName(getContext());
	}

	/**
	 * @param context
	 * @return value of FileName
	 */
	public final String getFileName(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.FileName.toString());
	}

	/**
	 * Set value of FileName
	 * @param filename
	 */
	public final void setFileName(String filename)
	{
		setFileName(getContext(), filename);
	}

	/**
	 * Set value of FileName
	 * @param context
	 * @param filename
	 */
	public final void setFileName(IContext context, String filename)
	{
		getMendixObject().setValue(context, MemberNames.FileName.toString(), filename);
	}

	/**
	 * @return value of FolderPath
	 */
	public final String getFolderPath()
	{
		return getFolderPath(getContext());
	}

	/**
	 * @param context
	 * @return value of FolderPath
	 */
	public final String getFolderPath(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.FolderPath.toString());
	}

	/**
	 * Set value of FolderPath
	 * @param folderpath
	 */
	public final void setFolderPath(String folderpath)
	{
		setFolderPath(getContext(), folderpath);
	}

	/**
	 * Set value of FolderPath
	 * @param context
	 * @param folderpath
	 */
	public final void setFolderPath(IContext context, String folderpath)
	{
		getMendixObject().setValue(context, MemberNames.FolderPath.toString(), folderpath);
	}

	/**
	 * @return value of S3Object_S3Bucket
	 */
	public final amazons3connector.proxies.S3Bucket getS3Object_S3Bucket() throws CoreException
	{
		return getS3Object_S3Bucket(getContext());
	}

	/**
	 * @param context
	 * @return value of S3Object_S3Bucket
	 */
	public final amazons3connector.proxies.S3Bucket getS3Object_S3Bucket(IContext context) throws CoreException
	{
		amazons3connector.proxies.S3Bucket result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.S3Object_S3Bucket.toString());
		if (identifier != null)
			result = amazons3connector.proxies.S3Bucket.load(context, identifier);
		return result;
	}

	/**
	 * Set value of S3Object_S3Bucket
	 * @param s3object_s3bucket
	 */
	public final void setS3Object_S3Bucket(amazons3connector.proxies.S3Bucket s3object_s3bucket)
	{
		setS3Object_S3Bucket(getContext(), s3object_s3bucket);
	}

	/**
	 * Set value of S3Object_S3Bucket
	 * @param context
	 * @param s3object_s3bucket
	 */
	public final void setS3Object_S3Bucket(IContext context, amazons3connector.proxies.S3Bucket s3object_s3bucket)
	{
		if (s3object_s3bucket == null)
			getMendixObject().setValue(context, MemberNames.S3Object_S3Bucket.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.S3Object_S3Bucket.toString(), s3object_s3bucket.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return s3SummaryObjectMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final amazons3connector.proxies.S3SummaryObject that = (amazons3connector.proxies.S3SummaryObject) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "AmazonS3Connector.S3SummaryObject";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
